{"componentChunkName":"component---src-templates-blog-post-js","path":"/access-policy-api/","result":{"data":{"site":{"siteMetadata":{"title":"bPekker.dev"}},"markdownRemark":{"id":"5b8e20cf-e2b1-52cc-b026-dea4eeaacd10","excerpt":"Drupal's robust architecture for role-based access control is highly effective, yet it does come with some limitations. Although several contributed modulesâ€¦","html":"<p>Drupal's robust architecture for role-based access control is highly effective, yet it does come with some limitations. Although several contributed modules such as <a href=\"https://www.drupal.org/project/content_access\">Content Access</a>, <a href=\"https://www.drupal.org/project/field_permissions\">Field permissions</a>, <a href=\"https://www.drupal.org/project/permissions_by_term\">Permissions by Term</a> or <a href=\"https://www.drupal.org/project/flexible_permissions\">Flexible Permissions</a> exist to address these limitations, from 10.3 we can utilize the built-in functionality of Drupal core to achieve the same outcome.</p>\n<blockquote>\n<p><a href=\"#how-to-define-a-custom-access-policy\">TL;DR; - Jump to the 'How to' section</a></p>\n</blockquote>\n<h3 id=\"what-are-access-policies\">What are Access Policies?</h3>\n<p>Access Policies are tagged <strong>services</strong> that can add or remove permissions for users, based on globally available contexts. This functionality is closely tied to Drupal core's existing system known as Cache Context, which access policies actively depend on granting us endless possibilities to alter the behaviour of our site.</p>\n<h5 id=\"how-does-it-work\">How does it work?</h5>\n<p>The API introduces 2 new concepts, from which the first is the <strong>build and alter phase</strong>. During the build phase, policies are processed resulting in a set of permissions that can be altered before transforming into immutable objects (preventing unauthorized tweaking through code during runtime), providing the capability to adjust the access policies of other modules, including core. These objects are then stored in the <a href=\"https://www.drupal.org/node/3365546\">variation cache</a> (and the <code class=\"language-text\">user.permissions</code> cache context), meaning you can have a different set of active permissions depending on the time of day, the domain, or other contextual elements.</p>\n<p>The other new concept the API is coming with is <strong>scopes and identifiers</strong> which allows you to handle more complex client requests, like different content editing permissions based on domain, or the limitation of node creation to office hours. Every permission that is being generated by the new Access Policy API applies to a given scope and identifier. The default for Drupal is <code class=\"language-text\">AccessPolicyInterface::SCOPE_DRUPAL</code> for both. If you want to create your own scope and identifier, you would need to define those in the <code class=\"language-text\">processAccessPolicies()</code> or <code class=\"language-text\">getItem()</code> call.</p>\n<p>You can read more about the system in <a href=\"https://www.drupal.org/node/3385551\">this change record</a>.</p>\n<h5 id=\"whats-under-the-hood\">What's under the hood</h5>\n<p>The main thing behind the scenes is a service collector called <code class=\"language-text\">AccessPolicyProcessor</code>, which is responsible for gathering all services that are tagged with <code class=\"language-text\">access_policy</code>.</p>\n<p>First, a decision is made whether the access policy applies to the defined scope, then an initial and an \"end-of-process\" (or final) evaluation is made to determine whether the current policy at hand should be applied to the system, based on the given cache context. This process is required to store the set of permissions in the variation cache.</p>\n<p>During the build phase, the <code class=\"language-text\">RefinableCalculatedPermissions</code> object holds the information of all permissions for all scopes along with the cacheable metadata. When the build phase ends, this is turned into an immutable <code class=\"language-text\">CalculatedPermissions</code> object.</p>\n<p>To add new items to the refinable calculated permissions object during the build phase, we can add the permissions using the <code class=\"language-text\">CalculatedPermissionsItem</code> object, which we will see later in the example.</p>\n<h3 id=\"how-to-define-a-custom-access-policy\">How to define a custom access policy</h3>\n<p>Defining a custom access policy should be as simple as creating</p>\n<ul>\n<li>a cache context that we will assign to our policy</li>\n<li>and a designated service tagged with <code class=\"language-text\">access_policy</code>.</li>\n</ul>\n<p>In our example, we will restrict the content team's ability to work on weekends. Before access policies, achieving this outcome could be quite challenging using the existing permission system. However, with the introduction of the new API, all you would need is a service and a cache context to make it happen:</p>\n<p><sub><em>modules/custom/your_module/src/Cache/Context/IsWeekendCacheContext:</em></sub></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>your_module<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>Context</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>CacheableMetadata</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>Context<span class=\"token punctuation\">\\</span>CacheContextInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Defines a cache context that determines whether today is a weekend.\n *\n * Cache context ID: 'is_weekend'.\n *\n * @CacheContext(\n *   id = \"is_weekend\",\n *   label = @Translation(\"Is Weekend?\"),\n *   cacheTags = {},\n *   dependencies = {},\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">IsWeekendCacheContext</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CacheContextInterface</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/**\n   * {@inheritdoc}\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Is Weekend?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * {@inheritdoc}\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token keyword static-context\">static</span><span class=\"token operator\">::</span><span class=\"token function\">isWeekend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string single-quoted-string\">'yes'</span> <span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'no'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"is_weekend.<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Returns whether it is a weekend.\n   * \n   * @return bool\n   *   Returns TRUE if it is a weekend today\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">isWeekend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * {@inheritdoc}\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getCacheableMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CacheableMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Since we are creating a cache context, don't forget to tag it as one in <code class=\"language-text\">your_module.services.yml</code> file:</p>\n<p><sub><em>modules/custom/your_module/your_module.services.yml:</em></sub></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">your_module.cache_context.is_weekend</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">class</span><span class=\"token punctuation\">:</span> Drupal\\your_module\\Cache\\Context\\IsWeekendCacheContext\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cache.context <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the remaining task is to develop the actual access policy service, which will leverage the cache context we established above so it can handle the permissions properly:</p>\n<p><sub><em>modules/custom/your_module/Access/WeekendEditingAccessPolicy.php:</em></sub></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">declare</span><span class=\"token punctuation\">(</span>strict_types <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>your_module<span class=\"token punctuation\">\\</span>Access</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>your_module<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>Context<span class=\"token punctuation\">\\</span>IsWeekendCacheContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>AccessPolicyBase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>AccountInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>CalculatedPermissionsInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Drupal<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>CalculatedPermissionsItem</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Allows content editors to create articles when it's a weekday.\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">WeekendEditingAccessPolicy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AccessPolicyBase</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/**\n   * {@inheritdoc}\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">calculatePermissions</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">AccountInterface</span> <span class=\"token variable\">$account</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$scope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">CalculatedPermissionsInterface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$calculated_permissions</span> <span class=\"token operator\">=</span> <span class=\"token keyword static-context\">parent</span><span class=\"token operator\">::</span><span class=\"token function\">calculatePermissions</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$account</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$scope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name static-context\">IsWeekendCacheContext</span><span class=\"token operator\">::</span><span class=\"token function\">isWeekend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'content_editor'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$account</span><span class=\"token operator\">-></span><span class=\"token function\">getRoles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token variable\">$calculated_permissions</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$calculated_permissions</span><span class=\"token operator\">-></span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CalculatedPermissionsItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string single-quoted-string\">'create article content'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string single-quoted-string\">'edit own article content'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * {@inheritdoc}\n   */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getPersistentCacheContexts</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$scope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">array</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'is_weekend'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Again, access policies are tagged services, which will be only processed if we tag it as an <code class=\"language-text\">access_policy</code>. Therefore the updated services.yml would look like:</p>\n<p><sub><em>modules/custom/your_module/your_module.services.yml:</em></sub></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">your_module.cache_context.is_weekend</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">class</span><span class=\"token punctuation\">:</span> Drupal\\your_module\\Cache\\Context\\IsWeekendCacheContext\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cache.context <span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">your_module.access_policy.weekend_editing</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">class</span><span class=\"token punctuation\">:</span> Drupal\\your_module\\Access\\WeekendEditingAccessPolicy\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> access_policy <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that we've got everything sorted out, let's dig into the Access Policy service and see what's happening there. If you take a close look, the <code class=\"language-text\">calculatePermissions()</code> method doesn't do anything if it's a weekend or if we're not dealing with an account designated as a content editor. On weekdays, things get interesting as the policy adds two new permissions to the overall set <em>(using the <code class=\"language-text\">CalculatedPermissionsItem</code>, which adds the permissions to the refinable calculated permissions object during build phase)</em> allowing content editors to freely create and edit their articles.</p>\n<h3 id=\"thoughts\">Thoughts</h3>\n<p>Building a site's permissions following policies is a really nice improvement for Drupal. While the above could be done without this feature, the new approach simplifies the process and is far more efficient in my opinion. This opens up opportunities for clients, and it is always better to explain that their goal is easily achievable than delving into complexities and added costs.</p>","frontmatter":{"title":"Access Policy API","date":"January 26, 2024","description":"Drupal's robust architecture for role-based access control is highly effective, yet it does come with some limitations. Although several contributed modules such as Content Access, Field Permissions, Permissions by Term, or Flexible Permissions exist to address these limitations, from 10.3 we can utilize the built-in functionality of Drupal core to achieve the same outcome."},"fields":{"slug":"/access-policy-api/","readingTime":{"text":"6 min read"}}},"previous":{"fields":{"slug":"/attributes-in-drupal/"},"frontmatter":{"title":"Attributes In Drupal"}},"next":{"fields":{"slug":"/to-patch-or-not-to-patch/"},"frontmatter":{"title":"To Patch or Not To Patch"}}},"pageContext":{"id":"5b8e20cf-e2b1-52cc-b026-dea4eeaacd10","previousPostId":"b168660d-b666-5040-9e20-451e44758bde","nextPostId":"a608f2bf-1f53-53e3-a087-ce99a320b0ba"}},"staticQueryHashes":["2155073650","3257411868","3514747643"],"slicesMap":{}}