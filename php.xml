<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[RSS Feed for php]]></title><description><![CDATA[A Drupal related blog Written by Balint Pekker, a software engineer being really good at turning caffeine into code.]]></description><link>https://bpekker.dev</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 22 Dec 2023 23:18:51 GMT</lastBuildDate><item><title><![CDATA[Attributes In Drupal]]></title><description><![CDATA[Drupal 10.2 is out, with an easier content management by improving user experience, and with some performance improvements in caching and…]]></description><link>https://bpekker.dev/attributes-in-drupal/</link><guid isPermaLink="false">https://bpekker.dev/attributes-in-drupal/</guid><pubDate>Mon, 18 Dec 2023 13:01:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.drupal.org/project/drupal/releases/10.2.0&quot;&gt;Drupal 10.2&lt;/a&gt; is out, with an easier content management by improving user experience, and with some performance improvements in caching and HTTP responses. It is also compatible with PHP 8.3, and it started using PHP attributes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;#how-does-the-code-change&quot;&gt;TL;DR; - Jump to the &apos;How to&apos; section&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;what-are-attributes-in-php&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-are-attributes-in-php&quot; aria-label=&quot;what are attributes in php permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What are attributes in PHP?&lt;/h3&gt;
&lt;p&gt;They introduce a flexible and standardized approach to add metadata to your code — similar to Doctrine annotations —, enhancing readability and documentation. Attributes are declared using the &lt;code class=&quot;language-text&quot;&gt;#[...]&lt;/code&gt; syntax, positioned above the element to which you want to attach them. These can also take arguments, allowing you to convey specific information. For instance:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;#[&lt;/span&gt;&lt;span class=&quot;token attribute-content&quot;&gt;&lt;span class=&quot;token attribute-class-name class-name&quot;&gt;ExampleAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;argument&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;ExampleClass&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Class code here.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To retrieve information about a class which is using attributes, the &lt;a href=&quot;https://www.php.net/manual/en/book.reflection.php&quot;&gt;Reflection API&lt;/a&gt; comes to the rescue. Using its &lt;code class=&quot;language-text&quot;&gt;getAttributes()&lt;/code&gt; method, you&apos;ll find yourself with an array of &lt;a href=&quot;https://www.php.net/manual/en/class.reflectionattribute.php&quot;&gt;ReflectionAttribute&lt;/a&gt; objects:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReflectionClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name static-context&quot;&gt;ExampleClass&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$attributes&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttributes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** @var \ReflectionAttribute $attribute */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$attributes&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$attribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$attribute&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;ExampleAttribute&apos;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$arguments&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$attribute&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getArguments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&apos;argument&apos;] &lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Drupal uses a new class to parse attributes (e.g. from a Block plugin) based on this API, which we will talk about later.&lt;/p&gt;
&lt;h5 id=&quot;handling-sensitive-data-use-case&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#handling-sensitive-data-use-case&quot; aria-label=&quot;handling sensitive data use case permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Handling Sensitive Data (Use Case)&lt;/h5&gt;
&lt;p&gt;In PHP 8.2 a new attribute called &lt;a href=&quot;https://www.php.net/manual/en/class.sensitiveparameter.php&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#[\SensitiveParameter]&lt;/code&gt;&lt;/a&gt; has been introduced. This attribute proves to be invaluable when dealing with sensitive information in stack traces generated for exceptions. It allows for the redaction of specific parameters, such as passwords, ensuring enhanced security when debugging, or when looking at logs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Since PHP 7.4 the &lt;code class=&quot;language-text&quot;&gt;zend.exception_ignore_args = On&lt;/code&gt; setting is available for use which allows to include or exclude arguments from stack traces generated for exceptions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, PDO uses the &lt;code class=&quot;language-text&quot;&gt;$password&lt;/code&gt; as a constructor parameter, and immediately tries to connect to the database. When this fails, the stack trace will include the password:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;PDOException: SQLSTATE[HY000] [2002] No such file or directory in /var/www/html/test.php:3
Stack trace:
#0 /var/www/html/test.php(3): PDO-&gt;__construct(&apos;mysql:host=loca...&apos;, &apos;root&apos;, &apos;password&apos;)
#1 {main}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When those sensitive parameters are marked by the new attribute, their value will be redacted, meaning instead of &lt;code class=&quot;language-text&quot;&gt;&apos;password&apos;&lt;/code&gt;, we should receive an &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;Object(SensitiveParameterValue)&lt;/code&gt;&lt;/strong&gt; in the stack trace.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;More information about the attribute can be found in the &lt;a href=&quot;https://wiki.php.net/rfc/redact_parameters_in_back_traces&quot;&gt;RFC&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;why-change-from-doctrine-annotations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-change-from-doctrine-annotations&quot; aria-label=&quot;why change from doctrine annotations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Change From Doctrine Annotations?&lt;/h3&gt;
&lt;p&gt;Doctrine Annotations are primarily used by &lt;a href=&quot;https://github.com/doctrine/orm&quot;&gt;Doctrine ORM&lt;/a&gt;, and they already started to migrate to PHP attributes. Consequently, &lt;strong&gt;annotations might face deprecation sooner or later&lt;/strong&gt;. Given that Drupal utilizes Doctrine Annotations solely for metadata, and with PHP 8 providing a built-in approach for this purpose (further enhanced by PHP 8.1 readonly properties), Drupal has the option to remove the dependency on Doctrine Annotations for good.&lt;/p&gt;
&lt;h5 id=&quot;does-this-mean-i-cant-use-annotations-anymore&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#does-this-mean-i-cant-use-annotations-anymore&quot; aria-label=&quot;does this mean i cant use annotations anymore permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Does this mean I can&apos;t use annotations anymore?&lt;/h5&gt;
&lt;p&gt;Drupal 10.2 lets you use attributes to declare custom classes, methods, parameters, properties or constants, but it does not explicitly use them to maintain backwards compatibility. This means contributed and custom modules can start migrating their code, aligning with the evolving standards (something that Drush 11 already did) before Drupal 11.&lt;/p&gt;
&lt;p&gt;This change will lead to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possibly a deprecated &lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Component/Annotation/Plugin/Discovery/AnnotatedClassDiscovery.php&quot;&gt;AnnotatedClassDiscovery&lt;/a&gt; removed in Drupal 11.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A new &lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php&quot;&gt;AttributeClassDiscovery&lt;/a&gt; using Reflection API to find plugins with attributes&lt;/strong&gt; (introduced in Drupal 10.2) - There is &lt;a href=&quot;https://www.drupal.org/project/drupal/issues/3395260&quot;&gt;an active Drupal 11 issue&lt;/a&gt; to investigate possibilities on how to improve performance by using something different than the Reflection API.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-does-the-code-change&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-does-the-code-change&quot; aria-label=&quot;how does the code change permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does the code change&lt;/h3&gt;
&lt;p&gt;Let&apos;s see Drupal Core&apos;s &lt;code class=&quot;language-text&quot;&gt;PageTitleBlock&lt;/code&gt; for our example, which &lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.1.x/core/lib/Drupal/Core/Block/Annotation/Block.php&quot;&gt;in Drupal 10.1, uses annotations&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token package&quot;&gt;Drupal&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Block&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Plugin&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * Provides a block to display the page title.
 *
 * @Block(
 *   id = &quot;page_title_block&quot;,
 *   admin_label = @Translation(&quot;Page title&quot;),
 *   forms = {
 *     &quot;settings_tray&quot; = FALSE,
 *   },
 * )
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;PageTitleBlock&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BlockBase&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TitleBlockPluginInterface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, &lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Core/Block/Attribute/Block.php&quot;&gt;in Drupal 10.2 it uses PHP attributes&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token php language-php&quot;&gt;&lt;span class=&quot;token delimiter important&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token package&quot;&gt;Drupal&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Core&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Block&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Plugin&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;Block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/**
 * Provides a block to display the page title.
 */&lt;/span&gt;
&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;#[&lt;/span&gt;&lt;span class=&quot;token attribute-content&quot;&gt;&lt;span class=&quot;token attribute-class-name class-name&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token attribute-class-name class-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;page_title_block&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token attribute-class-name class-name&quot;&gt;admin_label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token attribute-class-name class-name&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token attribute-class-name class-name&quot;&gt;TranslatableMarkup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;Page title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token attribute-class-name class-name&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;settings_tray&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token attribute-class-name class-name&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name-definition class-name&quot;&gt;PageTitleBlock&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BlockBase&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TitleBlockPluginInterface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.drupal.org/node/3395575&quot;&gt;change record&lt;/a&gt; says currently all Actions and Blocks are converted to use attributes, but what if I am a contrib/custom module developer and I define custom plugins?&lt;/p&gt;
&lt;p&gt;If we carefully inspect the &lt;code class=&quot;language-text&quot;&gt;DefaultPluginManager&lt;/code&gt; in Drupal 10.2, we notice there is a new constructor parameter called &lt;code class=&quot;language-text&quot;&gt;$plugin_definition_attribute_name&lt;/code&gt; which is initially &lt;code class=&quot;language-text&quot;&gt;NULL&lt;/code&gt;. This means, you&apos;ll need to add a new parameter to the parent constructor call (at least until &lt;code class=&quot;language-text&quot;&gt;$plugin_definition_annotation_name&lt;/code&gt; parameter is still in use and not deprecated.)&lt;/p&gt;
&lt;p&gt;If we check the &lt;code class=&quot;language-text&quot;&gt;BlockManager&lt;/code&gt; class, you can see the parent constructor call uses &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;Block::class&lt;/code&gt;&lt;/strong&gt; as the &lt;strong&gt;5th parameter&lt;/strong&gt; in 10.2&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;php&quot;&gt;&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Before Drupal 10.2&lt;/span&gt;
&lt;span class=&quot;token keyword static-context&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;Plugin/Block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$namespaces&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$module_handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;Drupal\Core\Block\BlockPluginInterface&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;Drupal\Core\Block\Annotation\Block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// After&lt;/span&gt;
&lt;span class=&quot;token keyword static-context&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;Plugin/Block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$namespaces&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$module_handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;Drupal\Core\Block\BlockPluginInterface&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name static-context&quot;&gt;Block&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&apos;Drupal\Core\Block\Annotation\Block&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This parameter is then stored in the &lt;code class=&quot;language-text&quot;&gt;$pluginDefinitionAttributeName&lt;/code&gt; property, and that gets used later in the &lt;code class=&quot;language-text&quot;&gt;getDiscovery()&lt;/code&gt; method of &lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Core/Plugin/DefaultPluginManager.php#L290&quot;&gt;DefaultPluginManager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you can see, this method then decides if it should use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Core/Plugin/Discovery/AttributeDiscoveryWithAnnotations.php&quot;&gt;AttributeDiscoveryWithAnnotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Core/Plugin/Discovery/AttributeClassDiscovery.php&quot;&gt;AttributeClassDiscovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Core/Plugin/Discovery/AnnotatedClassDiscovery.php&quot;&gt;AnnotatedClassDiscovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or &lt;a href=&quot;https://git.drupalcode.org/project/drupal/-/blob/10.2.x/core/lib/Drupal/Core/Plugin/Discovery/ContainerDerivativeDiscoveryDecorator.php&quot;&gt;ContainerDerivativeDiscoveryDecorator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;thoughts&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#thoughts&quot; aria-label=&quot;thoughts permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thoughts&lt;/h3&gt;
&lt;p&gt;When creating new plugins from now on, developers should primarily focus on using Attributes in the plugin definitions instead of Doctrine Annotations and ensuring that the appropriate parameters are included in the parent constructor call. The good news is that the process of registering the plugin in the &lt;code class=&quot;language-text&quot;&gt;services.yml&lt;/code&gt; file remains unchanged, allowing the developers to continue using &lt;code class=&quot;language-text&quot;&gt;parent: default_plugin_manager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While the changes may seem subtle, the adoption of PHP attributes opens up new possibilities leading to a more standardized, advanced way of code organization and metadata handling.&lt;/p&gt;</content:encoded><tags>attributes, doctrine, php, planet</tags></item></channel></rss>