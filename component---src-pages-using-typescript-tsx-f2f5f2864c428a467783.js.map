{"version":3,"file":"component---src-pages-using-typescript-tsx-f2f5f2864c428a467783.js","mappings":"qNAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCN,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+CCQX,IA9Ce,IAAoC,IAAD,MAAlC,SAAEN,EAAQ,MAAEJ,EAAK,SAAEW,GAAU,EAC3C,MACMC,EAD6B,MAChBR,EAASS,SACtBX,GAAOY,EAAAA,EAAAA,gBAAe,cAc5B,IAAIC,EAGFA,EADEH,EAEA,sBAAII,UAAU,gBACZ,gBAAC,EAAAP,KAAI,CAACC,GAAG,KAAKV,IAKhB,gBAAC,EAAAS,KAAI,CAACO,UAAU,mBAAmBN,GAAG,KACnCV,GAKP,MAAMiB,EAA+B,QAAzB,EAAGf,EAAKI,KAAKY,oBAAY,aAAtB,EAAwBD,OAEvC,OACE,uBAAKD,UAAU,iBAAiB,oBAAmBJ,GACjD,0BAAQI,UAAU,iBAAiBD,GACnC,4BAAOJ,GACP,8BAAQ,MACH,IAAIQ,MAAOC,cAAc,MAAG,qBAAGZ,KAAI,yBAAyBS,aAAM,EAANA,EAAQI,UAAO,KAAU,WAAW,MAAG,qBAAGb,KAAI,6BAA6BS,aAAM,EAANA,EAAQK,WAAQ,KAAU,YAAY,MAAG,qBAAGd,KAAI,wBAAwBS,aAAM,EAANA,EAAQM,SAAM,KAAU,WAExO,C,+CCIV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAExB,EAAK,SAAEW,GAAU,EAC3C,MAAM,KAAEL,IAASQ,EAAAA,EAAAA,gBAAe,cAgB1BW,EAAkBD,GAAelB,EAAKY,aAAaM,YACnDE,EAAgC,QAApB,EAAGpB,EAAKY,oBAAY,aAAjB,EAAmBlB,MAExC,OACE,gCACE,6BAAQ0B,EAAkB1B,EAAK,MAAM0B,EAAiB1B,GACtD,wBAAM2B,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAAS5B,IACnC,wBAAM6B,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAtB,EAAKY,oBAAY,OAAQ,QAAR,EAAjB,EAAmBD,cAAM,WAAR,EAAjB,EAA2BI,UAAO,KAE7C,wBAAMM,KAAK,gBAAgBC,QAAS5B,IACpC,wBAAM2B,KAAK,sBAAsBC,QAASH,IACzCd,EACA,C","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\"\nimport { graphql, Link, useStaticQuery } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  const data = useStaticQuery(graphql`\n    query LayoutQuery {\n      site {\n        siteMetadata {\n          social {\n            twitter\n            linkedin\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()} | <a href={`https://twitter.com/${social?.twitter || ``}`}>Twitter</a> | <a href={`https://linkedin.com/in/${social?.linkedin || ``}`}>LinkedIn</a> | <a href={`https://github.com/${social?.github || ``}`}>GitHub</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","children","isRootPath","pathname","useStaticQuery","header","className","social","siteMetadata","Date","getFullYear","twitter","linkedin","github","description","metaDescription","defaultTitle","name","content","property"],"sourceRoot":""}