{"componentChunkName":"component---src-templates-blog-post-js","path":"/enhancing-drupal-with-github-actions/","result":{"data":{"site":{"siteMetadata":{"title":"bPekker.dev"}},"markdownRemark":{"id":"b38f40d8-0e94-5807-9024-3f235dd5628a","excerpt":"When it comes to Drupal development, GitHub Actions offers invaluable assistance\nin automating repetitive tasks, standardizing your processes, and enhancingâ€¦","html":"<p>When it comes to Drupal development, GitHub Actions offers invaluable assistance\nin automating repetitive tasks, standardizing your processes, and enhancing code\nquality. By defining workflows as code in YAML files that can react to various events,\nit provides flexible customization and scalability. Pre-built actions can handle\ncommon tasks like building and testing code, while custom actions can be tailored to\nproject-specific requirements. Let's explore some of the best practices along with\nexamples of actions you could use in your next Drupal project.</p>\n<blockquote>\n<p><a href=\"#lets-get-into-action\">TL;DR; - Jump to the 'Let's get into action' section</a></p>\n</blockquote>\n<h3 id=\"what-to-expect-from-this-article\">What to Expect From This Article</h3>\n<p>By the end of this post, you'll have a fully-equipped Drupal project which uses\nactions to automate and enforce the usage of Drupal coding standards and detects bugs\nbefore they reach production through PHPStan and PHPUnit tests.</p>\n<p><em>Note: This post focuses on implementing and optimizing actions within your Drupal\nworkflow. For in-depth understanding of how the platform works,\nplease read the <a href=\"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions\">documentation</a>.</em></p>\n<h3 id=\"why-github-actions\">Why GitHub actions?</h3>\n<p>Mostly, <strong>because it's free for both public and private repositories</strong>\n(with free accounts getting <a href=\"https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#included-storage-and-minutes\">500 Mb storage and 2,000 minutes monthly</a>), making it\naccessible to all developers. It also provides real-time feedback to catch issues early,\nand <strong>allows for reuse of workflows and actions across several projects</strong>, saving time while\npromoting consistency. You could have various Drupal projects using the same\nprocess(es) for testing, validating or building an artifact, the limit is the sky.\nMoreover, its integration with <a href=\"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry#about-the-container-registry\">GitHub's package and container registry</a>\noffers a comprehensive suite of tools that align well with the needs of a Drupal project.</p>\n<h3 id=\"the-basics\">The Basics</h3>\n<h4 id=\"action\">Action</h4>\n<p>An action is a reusable piece of code or script designed to execute a specific task,\nlike installing dependencies with Composer. Typically written in YAML format (and\nstored in <code class=\"language-text\">.github/actions</code>, actions can be easily integrated into workflows,\nautomating tasks and reducing action runtime to conserve those free minutes. They\npromote code reuse and maintainability by centralizing common logic, <strong>eliminating\nthe need to modify every workflow individually when adjustments needed</strong>, such as\nchanging the PHP version. Actions serve as building blocks for constructing a\nrobust and powerful workflow.</p>\n<h4 id=\"workflow\">Workflow</h4>\n<p>Workflows are also defined using YAML syntax and must be stored in the <code class=\"language-text\">.github/workflows</code>\ndirectory within your repository. The key aspect of the design involves\ndefining the events that trigger the workflow's execution. These include a\nwide range of actions like pushes to the repository, pull request related events,\nissue comments, and <a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows\">many more</a>.\nThis customisation allows developers to ensure automated tasks are triggered precisely\nwhen needed.</p>\n<blockquote>\n<p>For example, you could save minutes of runtime on a free account by not running\nthe workflow <a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-a-workflow-when-a-pull-request-is-approved\">until a pull request is approved</a>.</p>\n</blockquote>\n<p>It begs for the question: Why would anyone opt for manual code review, consuming\nvaluable man-hours, just to know once they reviewed the code the tests could still\nfail. It is unnecessary. However, we have the option to generate artifacts for a\nstaging environment only after the successful execution of tests, and approval of\nthe code review. This approach ensures that the application is built on a solid\nfoundation, minimizing the risk of deploying flawed code to production.</p>\n<p>Understanding and configuring the triggers is crucial for tailoring workflows to suit\nspecific project requirements, ensuring efficient automation processes.</p>\n<h3 id=\"lets-get-into-action\">Let's get into action</h3>\n<p>Our main objective is to subject every opened pull request to a series\nof assessments, including PHPCS, PHPStan analysis and PHPUnit tests. However, we\nprefer not to test draft pull requests. Additionally, there might be instances\nwhere we prefer to manually initiate tests for a pull request before commencing\nthe code review process. Fortunately, we have the flexibility to accommodate both\napproaches, making sure our testing strategy aligns with our project's specific needs\nand workflows.</p>\n<blockquote>\n<p>To run PHPCS, PHPUnit and PHPStan, the necessary packages should be listed in your\nrepository's <code class=\"language-text\">composer.json</code> file if you are following along. You could require the packages directly in the GitHub action using the global\nComposer, but we aim to use project specific settings. For this, it is\nrecommended to use <a href=\"https://packagist.org/packages/drupal/core-dev\">drupal/core-dev</a></p>\n</blockquote>\n<p>Our workflow for all opened pull requests consists of the following:</p>\n<ul>\n<li>Running a PHP setup with a pre-defined version</li>\n<li>Validating composer.json and installing dependencies</li>\n<li>Running PHPCS, PHPStan and PHPUnit</li>\n</ul>\n<blockquote>\n<p>The full configuration can be found <a href=\"https://github.com/balintpekker/drupal-template\">here</a>, in a Drupal Recommended Template capable of running with both Lando and DDEV. You are free to fork, copy, or do anything with the repository.</p>\n</blockquote>\n<h3 id=\"the-composite-action\">The composite action</h3>\n<p><a href=\"https://docs.github.com/en/actions/creating-actions/creating-a-composite-action\">(What is a composite action?)</a></p>\n<p>In the repository linked above, you'll find a <a href=\"(https://github.com/balintpekker/drupal-template/blob/main/.github/actions/composer/action.yml)\">composite action</a> detailed in <code class=\"language-text\">.github/actions/composer/action.yml</code>. Composite actions, as mentioned earlier, are reusable components in a workflow. They eliminate the need for redundant code, thus simplifying maintenance efforts. This action accomplishes two main tasks:</p>\n<ul>\n<li>It configures PHP with a predetermined version (you can conveniently adjust this version using GitHub environment variables via the UI).</li>\n<li>It validates composer.json and installs dependencies.</li>\n</ul>\n<p>This functionality is beneficial for our workflow as it enables us to utilize the packages installed via Composer later.</p>\n<p>The action uses inputs for PHP and Composer version with default values provided:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">php_version</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"PHP Version to run.\"</span>\n    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"8.2\"</span>\n  <span class=\"token key atrule\">composer_version</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Composer version to run.\"</span>\n    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span></code></pre></div>\n<p>and then it runs the steps based on these values listed above:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">runs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">using</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"composite\"</span>\n  <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup PHP\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> shivammathur/setup<span class=\"token punctuation\">-</span>php@v2\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Using the php_version input here.</span>\n        <span class=\"token key atrule\">php-version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> inputs.php_version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">extensions</span><span class=\"token punctuation\">:</span> gd\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Validate composer.json\n      <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> bash\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> composer validate <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>check<span class=\"token punctuation\">-</span>all\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check composer.lock\n      <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> bash\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        composer install --dry-run\n        if [ $? -ne 0 ]; then\n          echo \"composer.lock is out of date. Please run 'composer update' to generate an updated lock file.\"\n          exit 1\n        fi</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies via composer\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"php-actions/composer@v6\"</span>\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">COMPOSER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"composer.json\"</span>\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Using both inputs here.</span>\n        <span class=\"token key atrule\">php_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> inputs.php_version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> inputs.composer_version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"--ignore-platform-reqs --optimize-autoloader\"</span></code></pre></div>\n<h3 id=\"the-workflow\">The workflow</h3>\n<p>The workflow for running the tests <a href=\"https://github.com/balintpekker/drupal-template/blob/main/.github/workflows/tests.yml\">can also be found in the repository</a>, located at <code class=\"language-text\">.github/workflows/tests.yml</code>. It consists of three jobs, one for each of the commands:</p>\n<h4 id=\"phpcs\">PHPCS</h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">run-phpcs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token comment\"># Disabling the job for Draft pull requests.</span>\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.pull_request.draft == false\n    <span class=\"token comment\"># Setting GitHub token to use GitHub CLI.</span>\n    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">GH_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout repository\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n      <span class=\"token comment\"># Using our custom composite action to run composer checks and composer install.</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Composer validate and install\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> ./.github/actions/composer\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> composer\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">php_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.PHP_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">composer_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.COMPOSER_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\"># We are using phpcs.xml.dist from the project root to determine --extension list, ignores and Drupal,</span>\n      <span class=\"token comment\"># DrupalPractice standards.</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run PHPCS on Pull Request Files\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          gh pr diff ${{ github.event.number }} --name-only | xargs find 2> /dev/null | xargs vendor/bin/phpcs -nq</span></code></pre></div>\n<p>As can be seen, the second step of the PHPCS job utilizes our previously defined custom composite action, helping us with the package installation process, thereby facilitating the use of PHPCS in the next step.</p>\n<p>Following that, the step employs the <code class=\"language-text\">gh pr diff</code> command, a GitHub CLI command utilized to examine the modified files in the PR (as we do not want to run PHPCS for all the files in the repository). To enable this functionality, we've incorporated an environment variable <code class=\"language-text\">GH_TOKEN</code>, necessary for GitHub CLI operations.</p>\n<p>Also, it is important to note that we rely on the repository's <a href=\"https://github.com/balintpekker/drupal-template/blob/main/phpcs.xml.dist\">phpcs.xml.dist</a> configuration to specify various parameters. This configuration dictates the extensions to be checked, specifies exclusions, defines the standards to adhere to (such as Drupal and DrupalPractice), and determines the folders subject to examination (although this aspect is irrelevant in this scenario).</p>\n<h4 id=\"phpstan\">PHPStan</h4>\n<p>PHPStan also relies on its own configuration file located at <a href=\"https://github.com/balintpekker/drupal-template/blob/main/phpstan.neon\">phpstan.neon</a>, which contains distinct rules not elaborated on in this article. In our workflow, we execute the <code class=\"language-text\">analyse</code> command for the entire codebase to identify any deprecations or errors. While it's possible to analyze only the changes in a PR, for the sake of this example, we opt to analyze the entire codebase. However, it's important to note that <strong>this approach is not recommended</strong>, especially for large repositories, due to the considerable time it consumes. Alternatively, you can customize the phpstan.neon file to include specific paths or adjust the action based on the example provided above to analyze only the files modified in the PR.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">run-phpstan</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token comment\"># Disabling the job for Draft pull requests.</span>\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.pull_request.draft == false\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout repository\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n      <span class=\"token comment\"># Using our custom composite action to run composer checks and composer install.</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Composer validate and install\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> ./.github/actions/composer\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> composer\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">php_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.PHP_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">composer_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.COMPOSER_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run PHPStan analysis\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> vendor/bin/phpstan analyse</code></pre></div>\n<h4 id=\"phpunit\">PHPUnit</h4>\n<p>The unit test segment closely resembles the PHPStan section, with the distinction that it targets the 'Unit' testsuite specified in the repository's <a href=\"https://github.com/balintpekker/drupal-template/blob/main/phpunit.xml.dist\">phpunit.xml.dist</a> file.  This configuration directs the script to locate test files accordingly. In our scenario, the repository features an <a href=\"https://github.com/balintpekker/drupal-template/blob/main/tests/src/Unit/ExampleTest.php\">ExampleTest</a> class containing a simple true assertion, serving to validate the proper execution of the action.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">run-phpunit</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token comment\"># Disabling the job for Draft pull requests.</span>\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.pull_request.draft == false\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout repository\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n      <span class=\"token comment\"># Using our custom composite action to run composer checks and composer install.</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Composer validate and install\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> ./.github/actions/composer\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> composer\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">php_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.PHP_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">composer_version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.COMPOSER_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\"># We are using phpunit.xml.dist from the project root to determine the directory of the 'Unit' testsuite,</span>\n      <span class=\"token comment\"># in this case 'tests/Unit'.</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run unit tests\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> vendor/bin/phpunit <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>testsuite Unit</code></pre></div>\n<p>Additionally, you can discover <a href=\"https://github.com/balintpekker/drupal-template/pulls\">two pull requests</a> within the repository, showcasing both a failing and a successful action for the tests. These PRs serve as demonstrations, allowing you to observe how the process unfolds and understand the underlying concept.</p>\n<h3 id=\"thoughts\">Thoughts</h3>\n<p>Using GitHub Actions with Drupal is incredibly user-friendly, making continuous integration and deployment a breeze. It is free for a given amount of minutes, and the ability to reuse actions shared by the community saves time and effort. Additionally, GitHub Actions offer the functionality to generate artifacts, suitable for deployment on shared hosting providers. Hence, while valuable, we opted not to include it in this article due to its need for project customization.</p>","frontmatter":{"title":"Enhancing Drupal with GitHub Actions","date":"April 16, 2024","description":"When it comes to Drupal development, GitHub Actions offers invaluable assistance in automating repetitive tasks, standardizing your processes, and enhancing code quality. By defining workflows as code in YAML files that can react to various events, it provides flexible customization and scalability. Pre-built actions can handle common tasks like building and testing code, while custom actions can be tailored to project-specific requirements. Let's explore some of the best practices along with examples of actions you could use in your next Drupal project."},"fields":{"slug":"/enhancing-drupal-with-github-actions/","readingTime":{"text":"9 min read"}}},"previous":{"fields":{"slug":"/automatic-updates/"},"frontmatter":{"title":"Automatic Updates"}},"next":null},"pageContext":{"id":"b38f40d8-0e94-5807-9024-3f235dd5628a","previousPostId":"ff195f73-095f-521e-bd43-e586f5b25c21","nextPostId":null}},"staticQueryHashes":["2155073650","3257411868","3514747643"],"slicesMap":{}}